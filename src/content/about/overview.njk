{% extends "main.njk" %}

{% block content %}

<h2>Overview</h2>

<h3>What is the Joint Kit?</h3>

<p>
  The Joint Kit is a server-side toolset for building data layers with NodeJS.
</p>

<p>
  It provides a library of abstract data operations, that hook to your
  custom data schema and operate according to your specific requirements.
</p>

<p>
  The solution is configuration-driven &mdash; allowing you to quickly implement
  robust data operation logic, using a config-like JSON syntax.
</p>

<p>
  You can use the Joint Kit to:
</p>

<lilp>
{% call text.framedblock(maxWidth='350px', raised=true) -%}
<ul class="definition">
  <li>
    <div>Build data models for your persisted data</div>
  </li>
  <li>
    <div>Build server-side method libraries</div>
  </li>
  <li>
    <div>Build RESTful APIs for client apps</div>
  </li>
</ul>
{%- endcall %}
</lilp>

<br />

<h3>Where does it fit in my application?</h3>

<p>
  Architecturally, the Joint Kit sits between your persisted data service
  (e.g. ORM) and your HTTP server framework.
</p>

<p>
  The Joint Kit leverages:
</p>

{% call text.framedblock(maxWidth='490px', raised=true) -%}
<ul class="definition">
  <li>
    <div style="width:180px"><i>your persistence service</i></div>
    <div style="color:#0b5693;width:25px">&#10132;</div>
    <div>to implement a data method layer</div>
  </li>
  <li>
    <div style="width:180px"><i>your server framework</i></div>
    <div style="color:#0b5693;width:25px">&#10132;</div>
    <div>to implement an HTTP API layer</div>
  </li>
</ul>
{%- endcall %}

<br />

<callout>
  Currently, only Bookshelf (db service) and Express (server framework) are supported.
</callout>

<br />

<p>
  Here&#39;s where the Joint Kit fits into your application:
</p>

<div class="diagram diagram-frame">
  <img src="/public/where-joint-kit-fits-in-your-app.svg" />
</div>

<br />

<h3>Quick to Implement</h3>

<p>
  At its core, the Joint Kit is a data operations library.

  <lilp>
  It provides a set of abstract data actions that can be quickly configured
  to operate on your custom data schema.
  </lilp>

  <lilp>
  The redundant, tedious logic behind each action (the majority of the work)
  is already handled for you...
  </lilp>

  <lilp>
  &nbsp;&nbsp;&nbsp; you just specify the concrete behavior.
  </lilp>
</p>

<h3>Configuration-Driven</h3>

<p>
  Nearly the entire solution can be defined using a JSON-based configuration
  syntax, leaving the programming logic to an extreme minimum.

  <lilp>
  With this approach, your custom data layers are dynamically generated on
  application startup.
  </lilp>

  <lilp>
  Configurations can therefore be hot-swapped, to load variations based upon
  application environment, etc.
  </lilp>
</p>

<h3>Programmatically Flexible</h3>

<p>
  If you want more complexity, integration, and control...
  you can leverage the library as a purely programmatic solution.

  <lilp>
  Let the Joint Kit handle the generic aspects of your data operations (the 80%),
  while you supplement the implementation with your own hand-rolled logic (the 20%).
  </lilp>
</p>

<h3>Isolated Services</h3>

<p>
  You can create multiple instances from the Joint Kit (referred to as <i>Joints</i>)
  within a single application; each isolated to service separate data
  repositories, schemas, and implementation behavior.

  <lilp>
  You can also mix-and-match both implementation methods (configuration and programmatic)
  within the same Joint instance.
  </lilp>
</p>

<br /><br />

<div>
  To get a deeper perspective on the solution, check out the
  <a href="{{ rootURI }}/guide/conceptual-walkthrough">Conceptual Walkthrough</a>
</div>

<br /><br />

<div>
  Or, head straight to <a href="{{ rootURI }}/guide/installation">Installation</a>
  to get developing.
</div>

{% endblock %}
