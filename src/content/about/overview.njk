{% extends "main.njk" %}

{% block content %}

<h2>Overview</h2>

<p>
  The Joint Kit is a Node-based development library for rapidly building data layers
  within your application.
</p>

{% call text.framedblock(headingText='Use the Joint Kit to:', maxWidth='405px') -%}
<ul class="definition">
  <li>
    <div>connect your Node app to persisted data schemas</div>
  </li>
  <li>
    <div>build server-side method libraries</div>
  </li>
  <li>
    <div>build RESTful APIs for client apps</div>
  </li>
</ul>
{%- endcall %}

<p>
  Here&#39;s where the Joint Kit fits into your application:
</p>

<p>
  [TBC - Diagram for server-side app]
</p>

<p>
  [TBC - Diagram for isomorphic app]
</p>

<h3>Quick to Implement</h3>

<p>
  At its core, the Joint Kit is a data operations library.

  <lilp>
  It exposes a set of abstract data actions (as JavaScript functions)
  that can be hooked to your custom data schema.
  </lilp>

  <lilp>
  The redundant, tedious logic behind each data action (the majority of the work)
  is already handled for you... you just need to define the concrete behavior
  for your application, using configrable JSON objects.
  </lilp>
</p>

<h3>Configuration-Driven</h3>

<p>
  Nearly the entire solution can be defined using a configuration syntax (in JSON),
  leaving the programming logic to an extreme minimum.

  <lilp>
  With this approach, your custom data layers are dynamically generated on
  application startup.
  </lilp>

  <lilp>
  Configurations can therefore be hot-swapped, to load variations based upon
  application environment, etc.
  </lilp>
</p>

<h3>Programmatically Flexible</h3>

<p>
  If you want more complexity, integration, and control...
  you can leverage the library as a purely programmatic solution.

  <lilp>
  Let the Joint Kit handle the generic aspects of your data operations (the 80%),
  while you supplement the implementation with your own hand-rolled logic (the 20%).
  </lilp>
</p>

<h3>Isolated Services</h3>

<p>
  You can create multiple instances from the Kit (referred to as <i>Joints</i>)
  within a single application; each isolated to service separate data
  repositories, schemas, and implementation behavior.

  <lilp>
  You can also mix-and-match both implementation methods (configuration and programmatic)
  with the same Joint instance.
  </lilp>
</p>

<br /><br />

<p>
  To get a deeper perspective on the solution, check out
  the <a href="{{ rootURI }}/guide/conceptual-walkthrough">Conceptual Walkthrough</a>
</p>

<p>
  Or, head straight to <a href="{{ rootURI }}/guide/getting-started">Getting Started</a> 
  for installation details.
</p>

{% endblock %}
