{% extends "main.njk" %}

{% block content %}

<h2>Conceptual Walkthrough</h2>

<p>
  To implement solutions with the Joint Kit, you create <i>Joints</i>.
</p>

<p>
  <b>(1)</b> Create a joint, providing your configured service instance.
</p>

<br />

{% call code.block(maxWidth='240px', raised=true) -%}
const joint = new Joint({
  service: myService
})
{%- endcall %}

<table class="layout">
<tr>
  <td>
    [img - service]
  </td>
  <td>
    [img - arrow]
  </td>
  <td>
    [img - database]
  </td>
</tr>
</table>

<br />

<p>
  <b>(2)</b> Use JSON configuration to generate a method library for your data schema.
</p>

<br />

<table class="layout">
<tr>
  <td style="vertical-align:middle;">
    Define your models.
  </td>
  <td width="475px;">
{% call code.block(heading='modelConfig [ ]', maxWidth='320px', raised=true) -%}
{
  name: 'User',
  tableName: 'user_account',
  associations: {
    profiles: {
      type: 'toMany',
      path: 'id => Profile.user_id'
    }
  }
}
{%- endcall %}
  </td>
</tr>
</table>

<br />

<table class="layout">
<tr>
  <td style="vertical-align:middle;">
    Define your methods.
  </td>
  <td width="475px;">
{% call code.block(heading='methodConfig [ ]', maxWidth='465px', raised=true) -%}
{
  modelName: 'User',
  methods: [
    {
      name: 'getUser',
      action: 'getItem',
      spec: {
        fields: [
          { name: 'id', type: 'Number', requiredOr: true },
          { name: 'username', type: 'String', requiredOr: true }
        ]
      }
    },
    <comment>...</comment>
  ]
}
{%- endcall %}
  </td>
</tr>
</table>

<br />

<table class="layout">
<tr>
  <td>
{% call code.block(maxWidth='400px', raised=true) -%}
joint.generate({ modelConfig, methodConfig })
{%- endcall %}
  </td>
  <td>
    [img - arrow]
  </td>
  <td>
    [img - database with schemas]
  </td>
</tr>
</table>

<br />

<p>
  Use the Promised-based methods programmatically in your code.
</p>

<br />

{% call code.block(maxWidth='220px', raised=true) -%}
const input = {
  fields: { id: 333 }
}
{%- endcall %}

<table class="layout">
<tr>
  <td>
{% call code.block(maxWidth='320px', raised=true) -%}
await joint.method.User.getUser(input)
{%- endcall %}
  </td>
  <td>
    response:
  </td>
  <td>
{% call code.block(raised=true) -%}
{
  ...
}
{%- endcall %}
  </td>
</tr>
</table>

<br />

<p>
  <b>(3)</b> Expose the operations as a RESTful API.
</p>

<br />

<table class="layout">
<tr>
  <td style="vertical-align:middle;">
    Define the router logic.
  </td>
  <td width="475px;">
{% call code.block(heading='routeConfig [ ]', maxWidth='465px', raised=true) -%}
{
  uri: '/profile/{id,username}',
  get: { method: 'Profile.getProfile' },
  post: { method: 'Profile.updateProfile', body: true }
}
{%- endcall %}
  </td>
</tr>
</table>

{% endblock %}
