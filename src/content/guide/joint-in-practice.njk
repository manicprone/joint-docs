{% extends "main.njk" %}

{% block content %}

<h2>Joint in Practice</h2>

<p>
  To implement solutions with the Joint Kit, you create <i>Joints</i>.
</p>

<p>
  A Joint connects to:
</p>

<ul class="definition">
  <li>
    <div style="width:180px"><i>your persistence service</i></div>
    <div style="width:27px">&#10132;</div>
    <div>to implement a data method layer</div>
  </li>
  <li>
    <div style="width:180px"><i>your server framework</i></div>
    <div style="width:27px">&#10132;</div>
    <div>to implement an HTTP API layer</div>
  </li>
</ul>

<h3>Create a Joint</h3>

{# ============================== BEGIN | Code Block  "/joint/index.js" ===== #}
{% call code.block(filename='/joint/index.js') -%}
import Joint from 'joint-kit';
import bookshelf from '../services/bookshelf'; <comment>// your configured bookshelf instance</comment>

const joint = new Joint({
  service: bookshelf,
});

export default joint;
{%- endcall %}
{# =============================== END  | Code Block  "/joint/index.js" ===== #}

<h3>Define Data Models</h3>

<p>
  Define your data models using a JSON descriptor:
</p>

{# ======================= BEGIN | Code Block  "/joint/model-config.js" ===== #}
{% call code.block(filename='/joint/model-config.js') -%}
export default {
  models: {
    <comment>// Define a model named: "Profile"</comment>
    Profile: {
      tableName: 'blog_profiles',
      timestamps: { created: 'created_at', updated: 'updated_at' },
      associations: {
        user: {
          type: 'toOne',
          path: 'user_id => User.id', <comment>// one-to-one</comment>
        },
        posts: {
          type: 'toMany',
          path: 'id => BlogPost.profile_id', <comment>// one-to-many</comment>
        },
        tags: {
          type: 'toMany',
          path: 'id => ProfileTag.profile_id => ProfileTag.tag_id => Tag.id', <comment>// many-to-many</comment>
        },
      },
    },
  },
};
{%- endcall %}
{# ======================== END  | Code Block  "/joint/model-config.js" ===== #}

<br />

<p>
  Use the <func>generate</func> <span>func</span>tion to dynamically build and register your models:
</p>

<callout>
  Models are registered as: &nbsp; <code>joint.model.&lt;modelName&gt;</code>
</callout>

{# ============================== BEGIN | Code Block  "/joint/index.js" ===== #}
{% call code.block(filename='/joint/index.js') -%}
import Joint from 'joint-kit';
import bookshelf from '../services/bookshelf';
<hilite>import modelConfig from './model-config';</hilite>

const joint = new Joint({
  service: bookshelf,
});

<hilite>joint.generate({ modelConfig });</hilite> <comment>// generate the models</comment>

export default joint;
{%- endcall %}
{# =============================== END  | Code Block  "/joint/index.js" ===== #}

{# ============================= BEGIN | Code Block  "example-usage.js" ===== #}
{% call code.block(filename='example-usage.js') -%}
import joint from '../joint';

if (joint.model.Profile) console.log('The Profile model exists !!!');
{%- endcall %}
{# ============================== END  | Code Block  "example-usage.js" ===== #}

<h3>Create a Method Library</h3>

<p>
  From the provided set of abstract data actions (<a href="{{ rootURI }}/api/joint-actions">Joint Actions</a>), you can quickly implement a customized method library.
</p>

<p>
  You can hand-roll the methods yourself:
</p>

<details>
<summary>Hand-rolling a CRUD set of methods</summary>

{# ========================== BEGIN | Code Block  "/methods/profile.js" ===== #}
{% call code.block(filename='/methods/profile.js') -%}
import joint from '../joint';

export function createProfile(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'user_id', type: 'Number', required: true },
      { name: 'title', type: 'String', required: true },
      { name: 'slug', type: 'String', defaultValue: '% kebabCase(title) %' },
      { name: 'tagline', type: 'String' },
      { name: 'is_live', type: 'Boolean', defaultValue: false },
    ],
  };

  return joint.createItem(spec, input);
}

export function updateProfile(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'id', type: 'Number', required: true, lookup: true },
      { name: 'title', type: 'String' },
      { name: 'slug', type: 'String' },
      { name: 'tagline', type: 'String' },
      { name: 'is_live', type: 'Boolean' },
    ],
  };

  return joint.updateItem(spec, input);
}

export function getProfile(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'id', type: 'Number', requiredOr: true },
      { name: 'slug', type: 'String', requiredOr: true },
    ],
  };

  return joint.getItem(spec, input);
}

export function getProfiles(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'user_id', type: 'Number' },
      { name: 'is_live', type: 'Boolean' },
    ],
    defaultOrderBy: '-created_at,title',
  };

  return joint.getItems(spec, input);
}

export function deleteProfile(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'id', type: 'Number', requiredOr: true },
      { name: 'slug', type: 'String', requiredOr: true },
    ],
  };

  return joint.deleteItem(spec, input);
}
{%- endcall %}
{# =========================== END  | Code Block  "/methods/profile.js" ===== #}
</details>

{{ text.dangle('or') }}

<p>
  You can define the methods using a JSON descriptor:
</p>

{# ====================== BEGIN | Code Block  "/joint/method-config.js" ===== #}
{% call code.block(filename='/joint/method-config.js') -%}
export default {
  resources: [
    {
      modelName: 'Profile',
      methods: [
        {
          name: 'createProfile',
          action: 'createItem',
          spec: {
            fields: [
              { name: 'user_id', type: 'Number', required: true },
              { name: 'title', type: 'String', required: true },
              { name: 'slug', type: 'String', defaultValue: '% kebabCase(title) %' },
              { name: 'tagline', type: 'String' },
              { name: 'is_live', type: 'Boolean', defaultValue: false },
            ],
          },
        },
        {
          name: 'updateProfile',
          action: 'updateItem',
          spec: {
            fields: [
              { name: 'id', type: 'Number', required: true, lookup: true },
              { name: 'title', type: 'String' },
              { name: 'slug', type: 'String' },
              { name: 'tagline', type: 'String' },
              { name: 'is_live', type: 'Boolean' },
            ],
          },
        },
        {
          name: 'getProfile',
          action: 'getItem',
          spec: {
            fields: [
              { name: 'id', type: 'Number', requiredOr: true },
              { name: 'slug', type: 'String', requiredOr: true },
            ],
          },
        },
        {
          name: 'getProfiles',
          action: 'getItems',
          spec: {
            fields: [
              { name: 'user_id', type: 'Number' },
              { name: 'is_live', type: 'Boolean' },
            ],
            defaultOrderBy: '-created_at,title',
          },
        },
        {
          name: 'deleteProfile',
          action: 'deleteItem',
          spec: {
            fields: [
              { name: 'id', type: 'Number', requiredOr: true },
              { name: 'slug', type: 'String', requiredOr: true },
            ],
          },
        },
      ],
    },
  ],
};
{%- endcall %}
{# ======================= END  | Code Block  "/joint/method-config.js" ===== #}

<br />

<p>
  Use the <func>generate</func> <span>func</span>tion to dynamically generate your methods:
</p>

<callout>
  Methods are registered as: &nbsp; <code>joint.method.&lt;modelName&gt;.&lt;methodName&gt;</code>
</callout>

{# ============================== BEGIN | Code Block  "/joint/index.js" ===== #}
{% call code.block(filename='/joint/index.js') -%}
import Joint from 'joint-kit';
import bookshelf from '../services/bookshelf';
import modelConfig from './model-config';
<hilite>import methodConfig from './method-config';</hilite>

const joint = new Joint({
  service: bookshelf,
});

<hilite>joint.generate</hilite>({ modelConfig, <hilite>methodConfig</hilite> });</hilite> <comment>// generate the methods</comment>

export default joint;
{%- endcall %}
{# =============================== END  | Code Block  "/joint/index.js" ===== #}

{# ============================== BEGIN | Code Block  "example-usage.js" ===== #}
{% call code.block(filename='example-usage.js') -%}
import joint from '../joint';

const input = {
  fields: { is_live: true }, <comment>// retrieve all "live" profiles</comment>
  orderBy: 'title', <comment>// order by the "title" field, ascending</comment>
};

joint.method.Profile.getProfiles(input)
  .then((result) => { ... })
  .catch((error) => { ... });
{%- endcall %}
{# =============================== END  | Code Block  "example-usage.js" ===== #}

<h3>Create RESTful Endpoints</h3>

<p>
  On top of your Joint methods, you can quickly expose a RESTful API layer.
</p>

<p>
  You can hand-roll the router yourself:
</p>

<details>
<summary>Hand-rolling a router</summary>

{# =========================== BEGIN | Code Block  "/router/profile.js" ===== #}
{% call code.block(filename='/router/profile.js') -%}
import express from 'express';
import joint from '../joint';

const router = express.Router();

router.route('/profile')
  .post((req, res) => {
    const input = {};
    input.fields = Object.assign({}, req.body, req.query);

    return joint.method.Profile.createProfile(input)
      .then(payload => handleDataResponse(payload, res, 201))
      .catch(error => handleErrorResponse(error, res));
  });

router.route('/profile/:id')
  .get((req, res) => {
    const input = {};
    input.fields = Object.assign({}, req.query, { id: req.params.id });

    return joint.method.Profile.getProfile(input)
      .then(payload => handleDataResponse(payload, res, 200))
      .catch(error => handleErrorResponse(error, res));
  })
  .post((req, res) => {
    const input = {};
    input.fields = Object.assign({}, req.body, req.query, { id: req.params.id });

    return joint.method.Profile.updateProfile(input)
      .then(payload => handleDataResponse(payload, res, 200))
      .catch(error => handleErrorResponse(error, res));
  })
  .delete((req, res) => {
    const input = {};
    input.fields = Object.assign({}, { id: req.params.id });

    return joint.method.Profile.deleteProfile(input)
      .then(payload => handleDataResponse(payload, res, 204))
      .catch(error => handleErrorResponse(error, res));
  });

router.route('/profiles')
  .get((req, res) => {
    const input = {};
    input.fields = Object.assign({}, req.query);

    return joint.method.Profile.getProfiles(input)
      .then(payload => handleDataResponse(payload, res, 200))
      .catch(error => handleErrorResponse(error, res));
  });

<comment>// Abstractly handle the responses:</comment>
function handleDataResponse(data, res, status = 200) {
  res.status(status).json(data);
}

function handleErrorResponse(error, res) {
  const status = error.status || 500;
  res.status(status).json(error);
}

module.exports = router;
{%- endcall %}
{# ============================ END  | Code Block  "/router/profile.js" ===== #}
</details>

{{ text.dangle('or') }}

<p>
  You can define the router using a JSON descriptor:
</p>

{# ======================= BEGIN | Code Block  "/joint/route-config.js" ===== #}
{% call code.block(filename='/joint/route-config.js') -%}
export default {
  routes: [
    {
      uri: '/profile',
      post: { method: 'Profile.createProfile', successStatus: 201, body: true },
    },
    {
      uri: '/profile/:id',
      get: { method: 'Profile.getProfile' },
      post: { method: 'Profile.updateProfile', body: true },
      delete: { method: 'Profile.deleteProfile', successStatus: 204 },
    },
    {
      uri: '/profiles',
      get: { method: 'Profile.getProfiles' },
    },
  ],
};
{%- endcall %}
{# ======================== END  | Code Block  "/joint/route-config.js" ===== #}

<br />

<p>
  Use the <func>generate</func> <span>func</span>tion to dynamically generate your router:
</p>

<callout>
  The router is registered as: &nbsp; <code>joint.router</code>
</callout>

{# ============================== BEGIN | Code Block  "/joint/index.js" ===== #}
{% call code.block(filename='/joint/index.js') -%}
import Joint from 'joint-kit';
<hilite>import express from 'express';</hilite>
import bookshelf from '../services/bookshelf';
import modelConfig from './model-config';
import methodConfig from './method-config';
<hilite>import routeConfig from './route-config';</hilite>

const joint = new Joint({
  service: bookshelf,
  <hilite>server: express,</hilite> <comment>// provide express, so it can generate the router middleware</comment>
});

<hilite>joint.generate</hilite>({ modelConfig, methodConfig, <hilite>routeConfig</hilite> });</hilite> <comment>// generate the router</comment>

export default joint;
{%- endcall %}
{# =============================== END  | Code Block  "/joint/index.js" ===== #}

{# ==================================== BEGIN | Code Block  "server.js" ===== #}
{% call code.block(filename='server.js') -%}
import express from 'express';
<hilite>import joint from '../joint';</hilite>

const app = express();

<comment>...</comment>

<hilite>app.use('/api', joint.router);</hilite> <comment>// provide the router to your running server</comment>

<comment>...</comment>
<comment>
// Now serving:
// POST   /api/profile
// GET    /api/profile/333
// POST   /api/profile/333
// DELETE /api/profile/333
// GET    /api/profiles
</comment>
{%- endcall %}
{# ===================================== END  | Code Block  "server.js" ===== #}


{% endblock %}
