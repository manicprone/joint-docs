{% extends "main.njk" %}

{% block content %}

<h2>Joint Actions</h2>

<p>
  The Joint Action set is the backbone of the Joint Kit solution.
</p>

<p>
  Each Joint instance provides a robust set of abstract data actions that hook directly to your persistence layer, handling the core logic for common data operations.
</p>

<p>
  The actions are implemented using a config-like JSON syntax.
</p>

<h3>Action Syntax</h3>

<p>
  All Joint Actions return Promises, and have the signature:
</p>

{# ========================== BEGIN | Code Block  "Joint Action syntax" ===== #}
{% call code.block() -%}
joint.&lt;<i>action</i>&gt;(spec, input, output)
  .then((payload) => { <comment>...</comment> })
  .catch((error) => { <comment>...</comment> });
{%- endcall %}
{# =========================== END  | Code Block  "Joint Action syntax" ===== #}

<br />
<p>
  <b>Action parameters:</b>
</p>
<table>
  <tr>
    <th>Parameter</th>
    <th>Description</th>
    <th style="text-align:center;">Required?</th>
  </tr>
  <tr>
    <td><a href="#joint-action-spec"><code>spec</code></a></td>
    <td>Defines the functionality of the action.</td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><a href="#joint-action-input"><code>input</code></td>
    <td>Supplies the data for an individual action request.</td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><a href="#joint-action-output"><code>output</code></td>
    <td>Specifies the format of the returned payload. Defaults to <code class="code-ref">'native'</code>.</td>
    <td style="text-align:center;">No</td>
  </tr>
</table>

<h3>Base Actions (CRUD)</h3>

<table>
  <tr>
    <th>Action</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><a href="#joint-action-createItem"><code>createItem</code></a></td>
    <td>Create operation for a single item.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-upsertItem"><code>upsertItem</code></a></td>
    <td>Upsert operation for a single item.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-updateItem"><code>updateItem</code></a></td>
    <td>Update operation for a single item.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-getItem"><code>getItem</code></a></td>
    <td>Read operation for retrieving a single item.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-getItems"><code>getItems</code></a></td>
    <td>Read operation for retrieving a collection of items.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-deleteItem"><code>deleteItem</code></a></td>
    <td>Delete operation for single item.</td>
  </tr>
</table>

<h3>Association Actions (Relational)</h3>

<table>
  <tr>
    <th>Action</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><a href="#joint-action-addAssociatedItems"><code>addAssociatedItems</code></a></td>
    <td>Operation for associating one to many items of a type to a main resource.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-hasAssociatedItem"><code>hasAssociatedItem</code></a></td>
    <td>Operation for checking the existence of an association on a main resource.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-getAllAssociatedItems"><code>getAllAssociatedItems</code></a></td>
    <td>Operation for retrieving all associations of a type from a main resource.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-removeAssociatedItems"><code>removeAssociatedItems</code></a></td>
    <td>Operation for disassociating one to many items of a type from a main resource.</td>
  </tr>
  <tr>
    <td><a href="#joint-action-removeAllAssociatedItems"><code>removeAllAssociatedItems</code></a></td>
    <td>Operation for removing all associations of a type from a main resource.</td>
  </tr>
</table>

<h4 id="joint-action-createItem">createItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-upsertItem">upsertItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-updateItem">updateItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-getItem">getItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-getItems">getItems</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-deleteItem">deleteItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-addAssociatedItems">addAssociatedItems</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-hasAssociatedItem">hasAssociatedItem</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-getAllAssociatedItems">getAllAssociatedItems</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-removeAssociatedItems">removeAssociatedItems</h4>

<p>
  [TBC]
</p>

<h4 id="joint-action-removeAllAssociatedItems">removeAllAssociatedItems</h4>

<p>
  [TBC]
</p>

<h3 id="joint-action-spec">Spec Options</h3>

<table>
  <tr>
    <th>Option</th>
    <th>Description</th>
    <th style="text-align:center;">Type</th>
    <th>Actions Supported</th>
    <th style="text-align:center;">Required?</th>
  </tr>
  <tr>
    <td><a href="#spec-opt-modelName"><code>modelName</code></a></td>
    <td>The model name of the resource upon which to act.</td>
    <td style="text-align:center;"><i>String</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-fields"><code>fields</code></a></td>
    <td>The root property for defining accepted fields.</td>
    <td style="text-align:center;"><i>Array</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">Yes (except getItems)</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-fieldsToReturn"><code>fieldsToReturn</code></a></td>
    <td>
      Restricts the fields to return with the payload. Supports <b>Field Sets</b>.
      <p>
        See the <a href="#spec-concept-fieldSets">Field Sets</a> section, for information on
        how to use this feature.
      </p>
    </td>
    <td style="text-align:center;"><i>Array</i><br />-or-<br /><i>Object</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-defaultOrderBy"><code>defaultOrderBy</code></a></td>
    <td>The default sort order for a collection payload.</td>
    <td style="text-align:center;"><i>String</i></td>
    <td>getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-forceAssociations"><code>forceAssociations</code></a></td>
    <td>Binds the <code class="code-ref">associations</code> to return, for all action requests.</td>
    <td style="text-align:center;"><i>Array</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-forceLoadDirect"><code>forceLoadDirect</code></a></td>
    <td>Binds the <code class="code-ref">loadDirect</code> associations to return, for all action requests.</td>
    <td style="text-align:center;"><i>Array</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-auth"><code>auth</code></a></td>
    <td>The root property for defining authorization on the action.</td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-main"><code>main</code></a></td>
    <td>The root property to wrap the <code class="code-ref">spec</code> options for the main resource, in an association action.</td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all association actions</i></td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><a href="#spec-opt-association"><code>association</code></a></td>
    <td>The root property to wrap the <code class="code-ref">spec</code> options for the associated resource, in an association action.</td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all association actions</i></td>
    <td style="text-align:center;">Yes</td>
  </tr>
</table>

<h4 id="spec-opt-modelName">spec.modelName</h4>

{{ api.optsig(['String'], 'all', 'Yes') }}

{{ api.apidesc('The model name of the resource upon which to act.') }}

{# ======================= BEGIN | Code Block  "Example getItems usage" ===== #}
{% call code.block('Example getItems usage:') -%}
function getUsers(input) {
  const spec = {
    <hilite>modelName: 'User'</hilite>,
    defaultOrderBy: '-created_at,username',
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ======================== END  | Code Block  "Example getItems usage" ===== #}

<h4 id="spec-opt-fields">spec.fields</h4>

{{ api.optsig(['Array'], 'all', 'Yes (except getItems)') }}

{{ api.apidesc('Declares all fields that are accessible to the method, and defines how they can be used.') }}

{# ===================== BEGIN | Code Block  "Example updateItem usage" ===== #}
{% call code.block('Example updateItem usage:') -%}
function markLogin(input) {
  const spec = {
    modelName: 'User',
    <hilite>fields: [
      { name: 'id', type: 'Number', required: true, lookup: true },
      { name: 'last_login_at', type: 'String', locked: true, defaultValue: '% now %' },
    ],</hilite>
  };

  return joint.updateItem(spec, input);
}
{%- endcall %}
{# ====================== END  | Code Block  "Example updateItem usage" ===== #}

{# ======================== BEGIN | Code Block  "Example getItem usage" ===== #}
{% call code.block('Example getItem usage:') -%}
function getUser(input) {
  const spec = {
    modelName: 'User',
    <hilite>fields: [
      { name: 'id', type: 'Number', requiredOr: true },
      { name: 'username', type: 'String', requiredOr: true },
      { name: 'external_id', type: 'String', requiredOr: true },
    ],</hilite>
  };

  return joint.getItem(spec, input);
}
{%- endcall %}
{# ========================= END  | Code Block  "Example getItem usage" ===== #}

<br />
<p>
  <b>Available properties:</b>
</p>

<table>
  <tr>
    <th>Property</th>
    <th>Description</th>
    <th style="text-align:center;">Type</th>
    <th>Actions Supported</th>
    <th style="text-align:center;">Required?</th>
  </tr>
  <tr>
    <td><code>fields.name</code></td>
    <td>
      The field name.
      <p>
        This value must match the underlying field name in the
        persistence layer (e.g. the column name of the database table).
      </p>
    </td>
    <td style="text-align:center;"><i>String</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><code>fields.type</code></td>
    <td>
      The field data type.
      <p>
        Can be: <code class="code-ref">'String'</code>, <code class="code-ref">'Number'</code>,
        <code class="code-ref">'Boolean'</code>, <code class="code-ref">'JSON'</code>.
      </p>
      <p>
        When an input value is provided for the field, it is explicitly cast to the defined type, to
        ensure the proper value is persisted.
      </p>
    </td>
    <td style="text-align:center;"><i>String</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">Yes</td>
  </tr>
  <tr>
    <td><code>fields.required</code></td>
    <td>
      If the field is required for the action.
      By default, a field is considered <i>not required</i>.
      <p>
        If a required field is not provided by the input, the Promise is rejected and an error is returned.
      </p>
    </td>
    <td style="text-align:center;"><i>Boolean</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><code>fields.requiredOr</code></td>
    <td>
      If the field is required for the action (within an OR set).
      By default, a field is considered <i>not required</i>.
      <p>
        If a required field is not provided by the input, the Promise is rejected and an error is returned.
      </p>
    </td>
    <td style="text-align:center;"><i>Boolean</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><code>fields.lookup</code></td>
    <td>
      Denotes the field is required to pre-fetch the resource before a mutation can occur.
      <p>
        If a lookup field is not provided by the input, the Promise is rejected and an error is returned.
      </p>
    </td>
    <td style="text-align:center;"><i>Boolean</i></td>
    <td>upsertItem, updateItem, deleteItem</td>
    <td style="text-align:center;">Yes for upsertItem, updateItem</td>
  </tr>
  <tr>
    <td><code>fields.lookupOr</code></td>
    <td>
      Denotes the field is required (within an OR set) to pre-fetch the resource before a mutation can occur.
      <p>
        If a lookup field is not provided by the input, the Promise is rejected and an error is returned.
      </p>
    </td>
    <td style="text-align:center;"><i>Boolean</i></td>
    <td>upsertItem, updateItem, deleteItem</td>
    <td style="text-align:center;">Yes for upsertItem, updateItem</td>
  </tr>
  <tr>
    <td><code>fields.locked</code></td>
    <td>
      Denotes the field cannot be updated by user input.
      Instead, the value is populated via the <b><code>defaultValue</code></b> property.
      <p>
        Either generate the <b><code>defaultValue</code></b> when hand-rolling the method logic yourself,
        or you can utilize the <b>Dynamic Values</b> feature.
      </p>
      <p>
        If the user input provides a value, it will be ignored.
      </p>
    </td>
    <td style="text-align:center;"><i>Boolean</i></td>
    <td>createItem, upsertItem, updateItem, getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><code>fields.defaultValue</code></td>
    <td>
      The default value to persist, when a value is not provided by the input.
      <p>
        Supports <b>Dynamic Values</b>:
      </p>
      <ul>
        <li><b><code>now</code></b></li>
        <li><code><b>kebabCase(</b>&lt;<i>fieldName</i>&gt;<b>)</b></code></li>
        <li><code><b>snakeCase(</b>&lt;<i>fieldName</i>&gt;<b>)</b></code></li>
        <li><code><b>camelCase(</b>&lt;<i>fieldName</i>&gt;<b>)</b></code></li>
        <li><code><b>pascalCase(</b>&lt;<i>fieldName</i>&gt;<b>)</b></code></li>
      </ul>
      <p>
        See the <a href="#spec-concept-dynamicValues">Dynamic Values</a> section, for information on
        how to use this feature.
      </p>
    </td>
    <td style="text-align:center;"><i>Mixed</i></td>
    <td>createItem, upsertItem, updateItem, getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
</table>

<br />
<p id="spec-concept-dynamicValues">
  <b>Dynamic Values</b>
</p>

<p>
  [TBC]
</p>

{# ================== BEGIN | Code Block  "Example with dynamic values" ===== #}
{% call code.block('Example usage with dynamic values:') -%}
function createTag(input) {
  const spec = {
    modelName: 'Tag',
    fields: {
      { name: 'label', type: 'String', required: true },
      { name: 'key', type: 'String', <hilite>defaultValue: '% kebabCase(label) %'</hilite> },
    },
  };

  return joint.createItem(spec, input);
}
{%- endcall %}
{# =================== END  | Code Block  "Example with dynamic values" ===== #}

{#
  now => Generates a timestamp reflecting the date/time the action request is executed.

  kebabCase(<fieldName>)   => Transforms the specified field value to kebab case.

  snakeCase(<fieldName>)  => Transforms the specified field value to snake case.

  camelCase(<fieldName>)  => Transforms the specified field value to camel case.

  pascalCase(<fieldName>) => Transforms the specified field value to pascal case.
#}

<h4 id="spec-opt-fieldsToReturn">spec.fieldsToReturn</h4>

{{ api.optsig(['Array', 'Object'], 'getItem, getItems', 'No') }}

{{ api.apidesc('Restricts the fields to return with the payload. When not provided, all fields are returned.') }}

{# ================================ BEGIN | Code Block  "Example usage" ===== #}
{% call code.block('Example usage:') -%}
function getUsers(input) {
  const spec = {
    modelName: 'User',
    <hilite>fieldsToReturn: ['id', 'username', 'display_name', 'avatar_url'],</hilite> <comment>// return public fields only</comment>
    defaultOrderBy: '-created_at,username',
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ================================= END  | Code Block  "Example usage" ===== #}

<br />
<p id="spec-concept-fieldSets">
  <b>Field Sets</b>
</p>

<p>
  [TBC]
</p>

{# ================ BEGIN | Code Block  "Example usage with field sets" ===== #}
{% call code.block('Example usage with field sets:') -%}
function getUsers(input) {
  const spec = {
    modelName: 'User',
    <hilite>fieldsToReturn: {
      default: ['id', 'username', 'display_name', 'avatar_url'],
      contact: ['id', 'email', 'display_name'],
      full: ['id', 'external_id', 'username', 'email', 'display_name', 'avatar_url', 'preferred_locale', 'created_at', 'updated_at', 'last_login_at'],
    },</hilite>
    defaultOrderBy: '-created_at,username',
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ================= END  | Code Block  "Example usage with field sets" ===== #}

<h4 id="spec-opt-defaultOrderBy">spec.defaultOrderBy</h4>

{{ api.optsig(['String'], 'getItems', 'No') }}

{% call api.apidesc() -%}
The default sort for a collection payload.
Provide a comma-delimited string for specifying multiple field precedence.
{%- endcall %}

{# ================================ BEGIN | Code Block  "Example usage" ===== #}
{% call code.block('Example usage:') -%}
function getUsers(input) {
  const spec = {
    modelName: 'User',
    <hilite>defaultOrderBy: '-created_at,username',</hilite> <comment>// created_at DESC, username ASC</comment>
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ================================= END  | Code Block  "Example usage" ===== #}

<h4 id="spec-opt-forceAssociations">spec.forceAssociations</h4>

{{ api.optsig(['Array'], 'getItem, getItems', 'No') }}

{% call api.apidesc() -%}
Binds the <code>associations</code> to return, for all action requests.
<br /><br />
See <a href="#input-opt-associations"><prop>input.associations</prop></a> for more details.
{%- endcall %}

{# ================================ BEGIN | Code Block  "Example usage" ===== #}
{% call code.block('Example usage:') -%}
function getProfiles(input) {
  const spec = {
    modelName: 'Profile',
    defaultOrderBy: '-created_at,title',
    <hilite>forceAssociations: ['user', 'posts', 'tags'],</hilite>
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ================================= END  | Code Block  "Example usage" ===== #}

<h4 id="spec-opt-forceLoadDirect">spec.forceLoadDirect</h4>

{{ api.optsig(['Array'], 'getItem, getItems', 'No') }}

{% call api.apidesc() -%}
Binds the <code>loadDirect</code> associations to return, for all action requests.
<br /><br />
See <a href="#input-opt-loadDirect"><prop>input.loadDirect</prop></a> for more details.
{%- endcall %}

{# ================================ BEGIN | Code Block  "Example usage" ===== #}
{% call code.block('Example usage:') -%}
function getUsers(input) {
  const spec = {
    modelName: 'User',
    defaultOrderBy: '-created_at,username',
    <hilite>forceLoadDirect: ['roles:name'],</hilite>
  };

  return joint.getItems(spec, input);
}
{%- endcall %}
{# ================================= END  | Code Block  "Example usage" ===== #}

<h4 id="spec-opt-auth">spec.auth</h4>

<br />
<p>
  <b>Available properties:</b>
</p>

<table>
  <tr>
    <th>Property</th>
    <th>Description</th>
    <th style="text-align:center;">Type</th>
    <th>Actions Supported</th>
    <th style="text-align:center;">Required?</th>
  </tr>
  <tr>
    <td><code>auth.ownerCreds</code></td>
    <td>
      Specifies the fields that can verify resource ownership (for owner auth rules).
    </td>
    <td style="text-align:center;"><i>Array</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
</table>

<p>
  [TBC]
</p>

<h4 id="spec-opt-main">spec.main</h4>

<p>
  [TBC]
</p>

<h4 id="spec-opt-association">spec.association</h4>

<p>
  [TBC]
</p>

<h3 id="joint-action-input">Input Options</h3>

<table>
  <tr>
    <th>Option</th>
    <th>Description</th>
    <th style="text-align:center;">Type</th>
    <th>Actions Supported</th>
    <th style="text-align:center;">Required?</th>
  </tr>
  <tr>
    <td><a href="#input-opt-fields"><code>fields</code></a></td>
    <td>The root property for providing field data.</td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">Yes (except getItems)</td>
  </tr>
  <tr>
    <td><a href="#input-opt-fieldSet"><code>fieldSet</code></a></td>
    <td>
      The <b>Field Set</b> to return.
      <p>
        See the <a href="#input-concept-fieldSets">Field Sets</a> section, for information on
        how to use this feature.
      </p>
    </td>
    <td style="text-align:center;"><i>String</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-orderBy"><code>orderBy</code></a></td>
    <td>The sort order to apply to the returned collection payload.</td>
    <td style="text-align:center;"><i>String</i></td>
    <td>getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-associations"><code>associations</code></a></td>
    <td>The association data to return with the payload. Returns full, detached payloads for the underlying resources.</td>
    <td style="text-align:center;"><i>Array</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-loadDirect"><code>loadDirect</code></a></td>
    <td>Loads association data directly to the to main resource payload, as if it were native field data.</td>
    <td style="text-align:center;"><i>Array</i></td>
    <td>getItem, getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-paginate"><code>paginate</code></a></td>
    <td></td>
    <td style="text-align:center;"><i>Object</i></td>
    <td>getItems</td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-trx"><code>trx</code></a></td>
    <td></td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
  <tr>
    <td><a href="#input-opt-authBundle"><code>authBundle</code></a></td>
    <td></td>
    <td style="text-align:center;"><i>Object</i></td>
    <td><i>all</i></td>
    <td style="text-align:center;">No</td>
  </tr>
</table>

<h4 id="input-opt-fields">input.fields</h4>

{{ api.optsig(['Object'], 'all', 'Yes (except getItems)') }}

{{ api.apidesc('Provides the field data for an action request.') }}

{# ========================== BEGIN | Code Block  "/methods/profile.js" ===== #}
{% call code.block(filename='/methods/profile.js') -%}
export function createProfile(input) {
  const spec = {
    modelName: 'Profile',
    fields: [
      { name: 'user_id', type: 'Number', required: true },
      { name: 'title', type: 'String', required: true },
      { name: 'tagline', type: 'String' },
      { name: 'is_live', type: 'Boolean', defaultValue: false },
    ],
  };

  return joint.createItem(spec, input);
}
{%- endcall %}
{# =========================== END  | Code Block  "/methods/profile.js" ===== #}

{# ================================ BEGIN | Code Block  "Example usage" ===== #}
{% call code.block('Example usage:') -%}
import * as profileMethods from '../methods/profile';

const input = {
  <hilite>fields: {
    user_id: 333,
    title: 'Functional Fanatic',
    tagline: 'I don\'t have habits, I have algorithms.',
    is_live: true,
  },</hilite>
};

profileMethods.createProfile(input)
  .then((payload) => { <comment>...</comment> }) <comment>// returns the created Profile resource</comment>
  .catch((error) => { <comment>...</comment> }); <comment>// or returns an error</comment>
{%- endcall %}
{# ================================= END  | Code Block  "Example usage" ===== #}

<h4 id="input-opt-fieldSet">input.fieldSet</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-orderBy">input.orderBy</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-associations">input.associations</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-loadDirect">input.loadDirect</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-paginate">input.paginate</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-trx">input.trx</h4>

<p>
  [TBC]
</p>

<h4 id="input-opt-authBundle">input.authBundle</h4>

<p>
  [TBC]
</p>

{% endblock %}
